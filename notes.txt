1. Run proto file -
    protoc --go_out=. --go-grpc_out=. common.proto


CREATE TABLE `user` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user` int DEFAULT NULL,
  `balance` double(10,2) DEFAULT '10.00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=35151 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `transaction` (
  `id` int NOT NULL AUTO_INCREMENT,
  `txn_id` varchar(255) NOT NULL,
  `sender` int NOT NULL,
  `receiver` int NOT NULL,
  `amount` double(10,2) DEFAULT NULL,
  `seq_no` int DEFAULT NULL,
  `view_no` int DEFAULT NULL,
  `type` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `digest` varchar(255) DEFAULT NULL,
  `error` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_txnid` (`txn_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4860 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE pbft_messages (
    `txn_id` varchar(255) NOT NULL,
	`message_type` varchar(64) NOT NULL,
    `sender` int DEFAULT NULL,
    `sign` TEXT NOT NULL,
    `payload` TEXT NOT NULL,
    `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB AUTO_INCREMENT=35151 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;



things to do -
1. client sends a req to leader -> leader can't get lock -> leader ignores the txn ->
client times out -> sends request to everyone -> everyone forwards request to leader -> leader gets request again -> ???

2. Sequential execution always

3. "Feel free to add a queueing mechanism or delay transactions instead of ignoring them immediately. "

participant cluster -> all nodes get


What if the receiver cluster in cross shard txn has only 2 servers active, will it lead to abort?
same case for intrashard, what is the expected outcome in this case?

- It leads to a timeout in the coordinator cluster and hence, abort. The coordinator cluster has a timer for
each cross-shard transaction (the time that it waits for the participant cluster to send back its vote).
Once the timer expires, the leader of the coordinator cluster runs consensus to abort the transaction.
- For intra-shard transactions: I'd suggest increasing the timer duration to avoid triggering view-changes.

You can remove the view-change part. But you still need a timer on each server for cross-shard transactions. The client also has its own timer.
